import { IConnectionManager } from "./interfaces";

/**
 * Provides a client proxy that wraps a Service definition generated by staticly compiled Protobuf definition.
 */
export class PbServiceProxy<T> {
  protected conn: IConnectionManager;
  protected serviceName: string;

  /**
   * @coonstructor
   * @param conn - Connection manager to handle outbound requests
   * @param serviceName
   */
  public constructor(conn: IConnectionManager, serviceName: string) {
    this.conn = conn;
    this.serviceName = serviceName;
  }

  /**
   *
   * @param svc Create and activate an instance of a service
   */
  public activate(svc, async?): T {
    if (async === true) {
      return svc.create(this.sendRpcImplAsync);
    } else {
      // tslint:disable-line
      return svc.create(this.sendRpcImpl);
    }
  }

  /**
   * Provides handler logic for RPC sender. Note: use of arrow function
   * required to maintain instance context.
   *
   * @param method
   * @param requestData
   * @param callback
   */
  protected sendRpcImpl = (method, requestData, callback) => {
    try {
      this.conn.send(this.serviceName, method.name, requestData, callback);
    } catch (e) {
      callback(e, null);
    }
  };

  /**
   * Provides handler logic for RPC sender. Note: use of arrow function
   * required to maintain instance context.
   *
   * @param method
   * @param requestData
   * @param callback
   */
  protected sendRpcImplAsync = (method, requestData, callback) => {
    try {
      this.conn.sendAsync(this.serviceName, method.name, requestData, callback);
    } catch (e) {
      callback(e, null);
    }
  };
}

export default PbServiceProxy;
