import React, { Fragment } from 'react';
import styled from 'styled-components';
import { useSelector, useDispatch } from 'react-redux';
import { PurchasePortalState } from "../redux/store";
import { IEventGraphQL } from "@sellout/models/.dist/interfaces/IEvent";
import IStripeTerminalReader from "@sellout/models/.dist/interfaces/IStripeTerminalReader";
import { Colors } from "@sellout/ui/build/Colors";
import ScreenHeader from '../components/ScreenHeader';
import * as AppActions from '../redux/actions/app.actions';
import * as UserActions from '../redux/actions/user.actions';
import { ErrorKeyEnum } from '../redux/reducers/app.reducer';
import CREATE_STRIPE_TERMINAL_CONNECTION_TOKEN from '@sellout/models/.dist/graphql/mutations/createStripeTerminalConnectionToken.mutation';
import { loadStripeTerminal, ErrorResponse, DiscoverResult } from '@stripe/terminal-js';
import useStripeTerminal from '../hooks/useStripeTerminal.hook';
import Icon, { Icons } from '@sellout/ui/build/components/Icon';
import Flex from '@sellout/ui/build/components/Flex';
import Loader, { LoaderSizes } from '@sellout/ui/build/components/Loader';
import Dropdown, { IDropdownItem } from "@sellout/ui/build/components/Dropdown";

const ScreenLoader = () => {
  return (
    <Flex align="center" justify="center">
      <Loader color={Colors.Orange} size={LoaderSizes.Medium}/>
    </Flex>
  );
}

const Container = styled.div`
  position: relative;
  top: -50px;
  background-color: ${Colors.White};
  border-radius: 15px 15px 0 0;
  overflow: hidden;
  height: 430px;
`;

const Content = styled.div`
  position: relative;
  margin: 15px 0 0;
  padding: 0 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  height: calc(100% - 100px);
`;

const DropdownContainer = styled.div`
  height: 100px;
  display: flex;
  justify-content: flex-start;
`;

const Text = styled.div`
  font-size: 1.2rem;
  font-weight: 500;
  color: ${Colors.Grey3};
  margin-top: 10px;
`;

function isErrorResponse(response: DiscoverResult | ErrorResponse): response is ErrorResponse {
  return (response as ErrorResponse).error !== undefined;
}

type StripeTerminalScreenProps = {
  event: Required<IEventGraphQL>;
};

const StripeTerminalScreen: React.FC<StripeTerminalScreenProps> = ({ event }) => {
  /** State **/
  const { paymentClientSecret } = useSelector(
    (state: PurchasePortalState) => state.order
  );
  const [connected, setConnected] = React.useState(false);
  const [loading, setLoading] = React.useState(true);
  const [readers, setReaders] = React.useState([]);
  const [selectedReader, setSelectedReader] = React.useState<any>(null);

  /** Actions **/
  const dispatch = useDispatch();
  const setError = (errorMsg: string) =>
    dispatch(AppActions.setError(ErrorKeyEnum.Global, errorMsg));

  /** Hooks **/
  const { terminal } = useStripeTerminal();

   const connectToReader = React.useCallback(async (reader: any) => {
     if (!terminal) return;
     setConnected(false);
     setSelectedReader(reader);

     const connect: any = await terminal.connectReader(reader);

     if (connect.error) {
       const message = `Failed to connect to reader: ${connect.error}`;
       console.error(message);
       setError(message);
       return;
     } else {
       setConnected(true);
     }

     const collect: any = await terminal.collectPaymentMethod(
       paymentClientSecret as string
     );

     if (collect.error) {
       const message = `Failed to collect payment: ${connect.error}`;
       console.error(message);
       setError(message);
       return;
     }

     const capture: any = await terminal.processPayment(collect.paymentIntent);

     if (capture.error) {
       const message = `Failed to capture payment: ${connect.error}`;
       console.error(message);
       setError(message);
       return;
     } else {
       console.log(capture);
     }
     
   }, [terminal]);

  React.useEffect(() =>  {
    if(!terminal) return;
    const doEffect = async () => {
      const config = { simulated: false }
      const discoverResult = await terminal.discoverReaders(config);
      
      if (isErrorResponse(discoverResult)) {
        console.log('Failed to discover: ', discoverResult.error);
      } else if (discoverResult.discoveredReaders.length === 0) {
        console.log('No available readers.');
      } else {
        const discoveredReaders = discoverResult.discoveredReaders;
        setReaders(discoveredReaders);
        if (discoveredReaders.length === 1) {
          connectToReader(discoveredReaders[0]);
        }
        setLoading(false);
      }
    }
    doEffect();
  }, [terminal]);

  /** Render **/
  const items: IDropdownItem[] = readers.map((reader: any) => {
    console.log(reader);
    return {
      text: reader.label,
      value: reader,
    };
  }) ?? [];

  return (
    <Container>
      <ScreenHeader title="Card Reader" />
      <Content>
        {!loading ? (
          <Fragment>
            <DropdownContainer>
              <Dropdown
                value={selectedReader?.label ?? ""}
                items={items}
                onChange={(reader: any) => {
                  connectToReader(reader);
                }}
                label="Select payment method"
                width="100%"
              />
            </DropdownContainer>
            <Flex flex="1" direction="column" align="center" justify="center">
              <Icon
                icon={Icons.CalculatorSolid}
                color={Colors.Grey3}
                size={36}
              />
              <Text>Swipe, dip, or tap a payment method on the reader</Text>
            </Flex>
          </Fragment>
        ) : (
          <ScreenLoader />
        )}
      </Content>
    </Container>
  );
};

export default StripeTerminalScreen;
